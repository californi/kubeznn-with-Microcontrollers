import kubernetes-family.acme;
System KubeZnnSystem : KubernetesFam = new KubernetesFam extended with {
  

  /*
    Metacontroller architecture - Mechanisms
  */

    // -----------------------------------------------------
    // Components for configurations
    // -----------------------------------------------------

    //Component Configurations service
    Component configurationsS : ServiceT = new ServiceT extended with {
        Port apiPort  = { }

        // Just an example of properties
        Property name = "configurations";
        Property expectedSlo = 0.95;
        Property desiredSlo = 0.98;
    }

    //Component Configurations Deployment
    Component configurationsD : DeploymentT = new DeploymentT extended with {
        Port apiPort  = { }
        Port monitorDynamicMonitoringConfigurationsPort  = { }
        Port monitorProactiveMonitingConfigurationsPort  = { }
        Port analyserSelfdiagnosisConfigurationsPort  = { }
        Port analyserReliabilityEstimationConfigurationsPort  = { }
    
        Property namespace = "default";
        Property hasAlternativeImages = true;
        Property alternativeImages = <"californibrs/configurations-configuration1","californibrs/configurations-configuration2","californibrs/configurations-configuration3">;
        Property name = "configurations";

        Property replicasHigh = 0;
        Property replicasLow = 0;
        Property stability = 0;

    }

    //Connector responsible for connecting the Deployment (configurationsD) and the service (configurationsS)
    Connector configurationsSC = new LabelSelectorConnectorT extended with {
        Property selectors = <[name : string = "app";value : string = "configurations";]>;
    }

    //Performing the kubernetes connection between Deployment (configurationsD) and the service (configurationsS)
    Attachment configurationsS.apiPort to configurationsSC.callee;
    Attachment configurationsD.apiPort to configurationsSC.caller;  


  /*
    Controller architecture - Microcontrollers
  */
    
        // -----------------------------------------------------
    // Components for Monitor-dynamicmonitoring 
    // -----------------------------------------------------

    //Component Monitor-dynamicmonitoring service
    Component monitorDynamicMonitoringS : ServiceT = new ServiceT extended with {
        Port apiPort  = { }
        Port monitorDynamicMonitoringConfigurationsPort  = { }
        Port monitorDynamicMonitoringAnalyserSelfdiagnosisPort  = { }
        Port monitorDynamicMonitoringAnalyserReliabilityEstimationPort  = { }

        // Just an example of properties
        Property name = "monitorDynamicMonitoring";
        Property expectedSlo = 0.95;
        Property desiredSlo = 0.98;
    }

    //Component monitorDynamicmonitoring Deployment
    Component monitorDynamicMonitoringD : DeploymentT = new DeploymentT extended with {
        Port apiPort  = { }
        Port monitorDynamicMonitoringConfigurationsPort  = { }
        Port monitorDynamicMonitoringAnalyserSelfdiagnosisPort  = { }
        Port monitorDynamicMonitoringAnalyserReliabilityEstimationPort  = { }

        Property namespace = "default";    
        Property name = "monitorDynamicMonitoring";

        Property replicasHigh = 0;
        Property replicasLow = 0;
        Property stability = 0;

    }

    //Connector responsible for connecting the Deployment (monitorDynamicmonitoringD) and the service (monitorDynamicMonitoringS)
    Connector monitorDynamicMonitoringSC = new LabelSelectorConnectorT extended with {
        Property selectors = <[name : string = "app";value : string = "monitorDynamicMonitoring";]>;
    }

    //Performing the kubernetes connection between Deployment (monitorDynamicMonitoringD) and the service (monitorDynamicMonitoringS)
    Attachment monitorDynamicMonitoringS.apiPort to monitorDynamicMonitoringSC.callee;
    Attachment monitorDynamicmonitoringD.apiPort to monitorDynamicMonitoringSC.caller; 


    // -----------------------------------------------------
    // Components for Monitor-proactivemonitoring 
    // -----------------------------------------------------

    //Component Monitor-proactivemonitoring service
    Component monitorProactiveMonitoringS : ServiceT = new ServiceT extended with {
        Port apiPort  = { }
        Port monitorProactiveMonitoringConfigurationsPort  = { }
        Port monitorProactiveMonitoringAnalyserSelfdiagnosisPort  = { }
        Port monitorProactiveMonitoringAnalyserReliabilityEstimationPort  = { }

        // Just an example of properties
        Property name = "monitorProactiveMonitoring";
        Property expectedSlo = 0.95;
        Property desiredSlo = 0.98;
    }

    //Component monitorProactiveMonitoring Deployment
    Component monitorProactiveMonitoringD : DeploymentT = new DeploymentT extended with {
        Port apiPort  = { }
        Port monitorProactiveMonitoringConfigurationsPort  = { }
        Port monitorProactiveMonitoringAnalyserSelfdiagnosisPort  = { }
        Port monitorProactiveMonitoringAnalyserReliabilityEstimationPort  = { }
        
        Property namespace = "default";    
        Property name = "monitorProactiveMonitoring";

        Property replicasHigh = 0;
        Property replicasLow = 0;
        Property stability = 0;

    }

    //Connector responsible for connecting the Deployment (monitorProactiveMonitoringD) and the service (monitorProactiveMonitoringS)
    Connector monitorProactiveMonitoringSC = new LabelSelectorConnectorT extended with {
        Property selectors = <[name : string = "app";value : string = "monitorProactiveMonitoring";]>;
    }    

    //Performing the kubernetes connection between Deployment (monitorProactiveMonitoringD) and the service (monitorProactiveMonitoringS)
    Attachment monitorProactiveMonitoringS.apiPort to monitorProactiveMonitoringSC.callee;
    Attachment monitorProactiveMonitoringD.apiPort to monitorProactiveMonitoringSC.caller; 



    // -----------------------------------------------------
    // Components for Analyser-selfdiagnosis 
    // -----------------------------------------------------

    //Component Analyser-selfdiagnosis service
    Component analyserSelfdiagnosisS : ServiceT = new ServiceT extended with {
        Port apiPort  = { }
        Port analyserSelfdiagnosisConfigurationsPort  = { }
        Port analyserSelfdiagnosisMonitorDynamicMonitoringPort  = { }
        Port analyserSelfdiagnosisMonitorProactiveMonitoringPort  = { }

        // Just an example of properties
        Property name = "analyserSelfdiagnosis";
        Property expectedSlo = 0.95;
        Property desiredSlo = 0.98;
    }

    //Component analyserSelfdiagnosis Deployment
    Component analyserSelfdiagnosisD : DeploymentT = new DeploymentT extended with {
        Port apiPort  = { }
        Port analyserSelfdiagnosisConfigurationsPort  = { }
        Port analyserSelfdiagnosisMonitorDynamicMonitoringPort  = { }
        Port analyserSelfdiagnosisMonitorProactiveMonitoringPort  = { }

        Property namespace = "default";    
        Property name = "analyserSelfdiagnosis";

        Property replicasHigh = 0;
        Property replicasLow = 0;
        Property stability = 0;

    }

    //Connector responsible for connecting the Deployment (analyserSelfdiagnosisD) and the service (analyserSelfdiagnosisS)
    Connector analyserSelfdiagnosisSC = new LabelSelectorConnectorT extended with {
        Property selectors = <[name : string = "app";value : string = "analyserSelfdiagnosis";]>;
    }

    //Performing the kubernetes connection between Deployment (analyserSelfdiagnosisD) and the service (analyserSelfdiagnosisS)
    Attachment analyserSelfdiagnosisS.apiPort to analyserSelfdiagnosisSC.callee;
    Attachment analyserSelfdiagnosisD.apiPort to analyserSelfdiagnosisSC.caller; 


// -----------------------------------------------------
    // Components for Analyser-ReliabilityEstimation 
    // -----------------------------------------------------

    //Component Analyser-ReliabilityEstimation service
    Component analyserReliabilityEstimationS : ServiceT = new ServiceT extended with {
        Port apiPort  = { }
        Port analyserReliabilityEstimationConfigurationsPort  = { }
        Port analyserReliabilityEstimationMonitorDynamicMonitoringPort  = { }
        Port analyserReliabilityEstimationMonitorProactiveMonitoringPort  = { }

        // Just an example of properties
        Property name = "analyserReliabilityEstimation";
        Property expectedSlo = 0.95;
        Property desiredSlo = 0.98;
    }

    //Component analyserReliabilityEstimation Deployment
    Component analyserReliabilityEstimationD : DeploymentT = new DeploymentT extended with {
        Port apiPort  = { }
        Port analyserReliabilityEstimationConfigurationsPort  = { }
        Port analyserReliabilityEstimationMonitorDynamicMonitoringPort  = { }
        Port analyserReliabilityEstimationMonitorProactiveMonitoringPort  = { }

        Property namespace = "default";    
        Property name = "analyserReliabilityEstimation";

        Property replicasHigh = 0;
        Property replicasLow = 0;
        Property stability = 0;

    }

    //Connector responsible for connecting the Deployment (analyserReliabilityEstimationD) and the service (analyserReliabilityEstimationS)
    Connector analyserReliabilityEstimationSC = new LabelSelectorConnectorT extended with {
        Property selectors = <[name : string = "app";value : string = "analyserReliabilityEstimation";]>;
    }

    //Performing the kubernetes connection between Deployment (analyserReliabilityEstimationD) and the service (analyserReliabilityEstimationS)
    Attachment analyserReliabilityEstimationD.apiPort to analyserReliabilityEstimationSC.callee;
    Attachment analyserReliabilityEstimationS.apiPort to analyserReliabilityEstimationSC.caller; 




    // ------------------------------------------------------------------------
    // Connecting a microcontroller (Monitor-dynamicmonitoring) to another (Analyser-selfdiagnosis)
    // ------------------------------------------------------------------------

    // Defining the connector
    Connector monitorDynamicMonitoringAnalyserSelfdiagnosisConn  = new ServiceConnectorT extended with {
        Property namespace = "default";
        Property name = "monitorDynamicMonitoringAnalyserSelfdiagnosisConn";
    }


    // Connecting both of them
    Attachment monitorDynamicMonitoringD.monitorDynamicMonitoringAnalyserSelfdiagnosisPort to monitorDynamicMonitoringAnalyserSelfdiagnosisConn.selector;
    Attachment analyserSelfdiagnosisS.monitorDynamicMonitoringAnalyserSelfdiagnosisPort to monitorDynamicMonitoringAnalyserSelfdiagnosisConn.selectee;


    // ------------------------------------------------------------------------
    // Connecting a microcontroller (Monitor-dynamicmonitoring) to another (Analyser-ReliabilityEstimation)
    // ------------------------------------------------------------------------

    // Defining the connector
    Connector monitorDynamicMonitoringAnalyserReliabilityEstimationConn  = new ServiceConnectorT extended with {
        Property namespace = "default";
        Property name = "monitorDynamicMonitoringAnalyserReliabilityEstimationConn";
    }


    // Connecting both of them
    Attachment monitorDynamicMonitoringD.monitorDynamicMonitoringAnalyserReliabilityEstimationPort to monitorDynamicMonitoringAnalyserReliabilityEstimationConn.selector;
    Attachment analyserReliabilityEstimationS.monitorDynamicMonitoringAnalyserReliabilityEstimationPort to monitorDynamicMonitoringAnalyserReliabilityEstimationConn.selectee;



    // ------------------------------------------------------------------------
    // Connecting a microcontroller (Monitor-proactivemonitoring) to another (Analyser-selfdiagnosis)
    // ------------------------------------------------------------------------

    // Defining the connector
    Connector monitorProactiveMonitoringAnalyserSelfdiagnosisConn  = new ServiceConnectorT extended with {
        Property namespace = "default";
        Property name = "monitorProactiveMonitoringAnalyserSelfdiagnosisConn";
    }


    // Connecting both of them
    Attachment monitorProactiveMonitoringD.monitorProactiveMonitoringAnalyserSelfdiagnosisPort to monitorProactiveMonitoringAnalyserSelfdiagnosisConn.selector;
    Attachment analyserSelfdiagnosisS.monitorProactiveMonitoringAnalyserSelfdiagnosisPort to monitorProactiveMonitoringAnalyserSelfdiagnosisConn.selectee;


    // ------------------------------------------------------------------------
    // Connecting a microcontroller (Monitor-Proactivemonitoring) to another (Analyser-ReliabilityEstimation)
    // ------------------------------------------------------------------------

    // Defining the connector
    Connector monitorProactiveMonitoringAnalyserReliabilityEstimationConn  = new ServiceConnectorT extended with {
        Property namespace = "default";
        Property name = "monitorProactiveMonitoringAnalyserReliabilityEstimationConn";
    }


    // Connecting both of them
    Attachment monitorProactiveMonitoringD.monitorProactiveMonitoringAnalyserReliabilityEstimationPort to monitorProactiveMonitoringAnalyserReliabilityEstimationConn.selector;
    Attachment analyserReliabilityEstimationS.monitorProactiveMonitoringAnalyserReliabilityEstimationPort to monitorProactiveMonitoringAnalyserReliabilityEstimationConn.selectee;


// ------------------------------------------------------------------------------------------------------------
// ------------------------------------------------------------------------------------------------------------
// ------------------------------------------------------------------------------------------------------------
// ------------------------------------------------------------------------------------------------------------

  /*
    Target System architecture - KubeZnn
  */
  
  Component kubeZnnDbS : ServiceT = new ServiceT extended with {
    Port sqlPort  = { }
    Port connectionSqlPort  = { }
    Property name = "kube-znn-db";
  }
  Component kubeZnnDbD : DeploymentT = new DeploymentT extended with {
    Port sqlPort  = { }
    Property namespace = "default";
    Property name = "kube-znn-db";
  }
  Component kubeZnnS : ServiceT = new ServiceT extended with {
    Port apiPort  = { }
    Property name = "kube-znn";
    Property expectedSlo = 0.95;
    Property desiredSlo = 0.98;
  }
  Component kubeZnnD : DeploymentT = new DeploymentT extended with {
    Port apiPort  = { }
    Port sqlPort  = { }
    Property namespace = "default";
    Property hasAlternativeImages = true;
    Property maxReplicas = 3;
    Property alternativeImages = <"cmendes/kube-znn:text", "cmendes/kube-znn:200k","cmendes/kube-znn:600k">;
    Property name = "kube-znn";
    Property replicasHigh = 0;
    Property replicasLow = 0;
    Property replicasText = 0;
    Property stability = 0;

  }
  Connector dbConnection  = new ServiceConnectorT extended with {
    Property namespace = "default";
    Property name = "kube-znn-db";
  }
  Connector kubeZnnServiceConnector  = new LabelSelectorConnectorT extended with {
    Property selectors = <[name : string = "app";value : string = "kube-znn";]>;
  }
  Connector dbServiceConnector  = new ServiceConnectorT extended with {
    Property selectors = <[name : string = "app";value : string = "kube-znn-db";]>;
  }
  
  

  Attachment kubeZnnDbD.sqlPort to dbServiceConnector.selectee;
  Attachment kubeZnnDbS.sqlPort to dbServiceConnector.selector;
  Attachment kubeZnnDbS.connectionSqlPort to kubeZnnServiceConnector.callee;
  Attachment kubeZnnD.sqlPort to kubeZnnServiceConnector.caller;
  Attachment kubeZnnD.apiPort to dbConnection.selectee;
  Attachment kubeZnnS.apiPort to dbConnection.selector;
}